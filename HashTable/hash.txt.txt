#include<iostream>
#include<vector>
using namespace std;
enum State
{
	EXIST,//存在
	EMPTY,//空
	DELETE,//删除
};
template<class K,class V>
struct HashNode
{
	K _key;
	V _value;
	State _state;

	HashNode(const K& key=K(),const V& value=V())
		:_key(key)
		,_value(value)
		,_state(EMPTY)
	{}
};
template<class K>
struct Hash
{
	size_t operator()(const K& key)
	{
		return key;
	}
};
模板的特化
template<>
struct Hash<string>
{
	static size_t BKDRHash(const char*str)
	{
		unsigned int seed = 131;
		unsigned int hash = 0;
		while(*str)
		{
			hash=hash*seed+(*str++);
		}
		return(hash &0x7FFFFFF);
	}
	size_t operator()(const string&s)
	{
		return BKDRHash(s.c_str());
	}
};


template<class K,class V,class __HashFunc = Hash<K>>
class HashTable
{
	typedef HashNode<K,V> Node;
public:
	HashTable()
		:_size(0)
	{}
	bool Insert(const K&key,const V&value)
	{
		CheckCapacity();
		if(Find(key))//滤重
		{
			return false;
		}
		size_t i = 1;
		size_t index = HashFunc(key);//生成下标值
		size_t start = index;
		while(_tables[index]._state == EXIST)
		{
			二次探测
			index = start+i*i;
			index %= _tables.size();
			++i;
			++index;
			if(index == _tables.size())
			{
				index =0;//当到最后一个位置还没有找到，从第一个位置开始遍历
			}
		}
		_tables[index]._key = key;
		_tables[index]._value = value;
		_tables[index]._state = EXIST;
		_size++;
		return true;
	}
	bool Earse(const K& key)
	{
		Node *tmp = Find(key);
		if(tmp)
		{
			tmp->_state = DELETE;
			--_size;
			return true;
		}
		else
		{
			return false;
		}
	}
	Node* Find(const K& key)
	{
		size_t index = HashFunc(key);
		size_t start = index;
		size_t i = 1;
		while(_tables[index]._state != EMPTY)
		{
			if(_tables[index]._key == key)
			{
				if(_tables[index]._state == EXIST)
				{
					return &_tables[index];
				}
				else
				{
					return NULL;
				}
			}
			二次探测
			index = start + i*i;
			index %= _tables.size();
			++i;
			
			if(index == _tables.size())
			{
				index = 0;
			}
		}
		return NULL;
	}
	void CheckCapacity()
	{
		if(_tables.size()==0 || _size*10/_tables.size() >= 7)
		{
			size_t newsize = _tables.size()*2;//扩容两倍
			if(newsize == 0)
			{
				newsize = 10;
			}
			HashTable<K,V,__HashFunc>newht;
			newht._tables.resize(newsize);
			for(size_t i = 0;i < _tables.size();++i)
			{
				if(_tables[i]._state == EXIST)
				{
					newht.Insert(_tables[i]._key,_tables[i]._value);//将数据插入新空间
				}
			}
			_tables.swap(newht._tables);
		}
	}

	size_t HashFunc(const K&key)
	{
		__HashFunc hf;
		return hf(key)%_tables.size();
	}
protected:
	vector<Node>_tables;
	size_t _size;//有效字段
};
int main()
{
	HashTable<int,int> ht;
	int a[]= {74,29,39,44,4};
	for(size_t i = 0;i<sizeof(a)/sizeof(a[0]);i++)
	{
		ht.Insert(a[i],i);
	}
	ht.Earse(29);
}
拉链法
节点定义
namespace HASH_BUCKET
{
	template<class V>
	struct HashNode
	{
		V _v;
		HashNode<V>* _next;
		//构造函数
		HashNode(const V& v)
			:_v(v)
			,_next(NULL)
		{}
	};
	template<class K,class V,class KeyOfValue,class __HashFunc>
	class HashTable;
	template<class K,class V,class KeyOfValue,class __HashFunc>
	struct __HashTableIterator
	{
		typedef __HashTableIterator <K,V,KeyOfValue,__HashFunc>Self;//迭代器重命名
		typedef HashNode<V> Node;
		typedef HashTable<K,V,KeyOfValue,__HashFunc> HT;
		Node* _node;
		HT* _ht;
		__HashTableIterator(Node* node,HT *ht)
			:_node(node)
			,_ht(ht)
		{}

		V& operator*()
		{
			return _node->_v;
		}

		V* operator->()
		{
			return &(operator*());
		}

	    Self& operator++()
		{
			if(_node->_next)
			{
				_node = _node->_next;
			}
			else
			{
				KeyOfValue kov;
				size_t index = _ht->HashFunc(kov(_node->_v),_ht->_tables.size());
				++index;
				while(index < _ht->_tables.size())
				{
					if(_ht->_tables[index])
					{
						_node=_ht->_tables[index];
						break;
					}
					else
					{
						++index;
					}
				}
				if(index == _ht->_tables.size())
				{
					_node = NULL;
				}
			}
			return *this;
		}
		Self operator++(int)
		{
			Self tmp(*this);
			++this;
			return tmp;
		}
		bool operator == (const Self& s)const
		{
			return _node == s._node;
		}
		bool operator != (const Self& s)const
		{
			return _node != s._node;
		}
	};
	template<class K>
	struct Hash
	{
		size_t operator()(const K& key)
		{
			return key;
		}
	};
	//模板的特化
	template<>
	struct Hash<string>
	{
		static size_t BKDRHash(const char*str)
		{
			unsigned int seed = 131;
			unsigned int hash = 0;
			while(*str)
			{
				hash=hash*seed+(*str++);
			}
			return(hash &0x7FFFFFF);
		}
		size_t operator()(const string&s)
		{
			return BKDRHash(s.c_str());
		}
   };


	template<class K,class V,class KeyOfValue,class __HashFunc = Hash<K>>//拿key取模
	class HashTable
	{
		typedef HashNode<V> Node;
		friend struct __HashTableIterator<K,V,KeyOfValue,__HashFunc>;
	public:
		typedef __HashTableIterator<K,V,KeyOfValue,__HashFunc> Iterator;
		Iterator Begin()
		{
			for(size_t i = 0;i <_tables.size();++i)
			{
				if(_tables[i])
				{
					return Iterator(_tables[i],this);
				}
			}
			return End();
		}
		Iterator End()
		{
			return Iterator(NULL,this);
		}
		//表的初始化
		HashTable()
			:_size(0)
		{}
		bool Insert(const V& v)
		{
			CheckCapacity();
			KeyOfValue kov;
			size_t index = HashFunc(kov(v),_tables.size());
            Node* cur = _tables[index];
			while(cur)
			{
				if(kov(cur->_v) == kov(v))
				{
					return false;
				}
				cur = cur->_next;
			}
			Node* node = new Node(v);

			node->_next = _tables[index];
			_tables[index] = node;
			++_size;
            
			return true;
		}
		
		bool Remove(const K& key)//考虑头 尾  处理中间和头
		{
			KeyOfValue kov;
			size_t index = HashFunc(key);//找位置
			Node* cur = _tables[index];
			if(cur == NULL)
				return false;
			if(kov(cur->_v)==key)
			{
				_tables[index] = cur->_next;
				delete cur;
				return true;
			}
			else//不是头
			{
				Node* prev = cur;
				cur = cur->_next;
				while(cur)
				{
					if(kov(cur->_v) == key)
					{
						prev->_next = cur->_next;
						delete cur;
						return true;
					}
					prev = cur;
					cur = cur->_next;
				}
				return false;
			}
		}
	    Node* Find(const K& key)
		{
			size_t index = HashFunc(kov(v),_table.size());
			Node* cur = _tables[index];
			KeyOfValue kov;
			while(cur)
			{
				if(kov(cur->_v)== key);
				{
					return cur;
				}
				else
				{
					cur = cur->_next;
				}
			}
			return NULL;
		}
		size_t GetPrimenum(const size_t& num)
	    {
	        const int Primesize = 28;
	        static const unsigned long Primenum[Primesize] =
	        {
	            53ul, 97ul, 193ul, 389ul, 769ul,
	            1543ul, 3079ul, 6151ul, 12289ul, 24593ul,
	            49157ul, 98317ul, 196613ul, 393241ul,
	            786433ul,
	            1572869ul, 3145739ul, 6291469ul, 12582917ul,
	            25165843ul,
	            50331653ul, 100663319ul, 201326611ul, 402653189ul,
	            805306457ul,
	            1610612741ul, 3221225473ul, 4294967291ul
	        };
	        for (int i = 0; i < Primesize; ++i)
	        {
	            if (Primenum[i] > num)
	            {
	                return Primenum[i];
	            }
	        }
	        return Primenum[Primesize-1];
	    }

      void CheckCapacity()
		{
			if(_tables.size()==0)
			{
				_tables.resize(GetPrimenum(0),NULL);
			}
			else if(_size = _tables.size())
			{
				size_t newsize = GetPrimenum(_tables.size());
				if(newsize == _tables.size())
				{
					return;
				}
				vector<Node*>newtables;
				newtables.resize(newsize,NULL);
				KeyOfValue kov;
				for(size_t i = 0;i < _tables.size();i++)
				{
					Node* cur = _tables[i];
					while(cur)
					{
						size_t index = HashFunc(kov(cur->_v),newsize);
						Node* next = cur->_next;
						cur->_next = newtables[index];
						newtables[index] = cur;
						cur = next;
					}
				}
			}
		}

		//计算下标位置
		size_t HashFunc(const K& key,size_t size)
		{
			__HashFunc hf;
			return hf(key)%size;
		}

	private:
		vector<Node*> _tables;
		size_t _size;
	};
	template<class K>
	struct SetKeyOfValue
	{
		const K& operator()(const K& key)
		{
			return key;
		}
	};
	template<class K,class V>
	struct MapKeyOfValue
	{
		const V& operator()(const pair<K,V>& kv)
		{
			return kv.first;
		}
	};
	void TestHashTable()
	{  
		typedef HashTable<int,int,SetKeyOfValue<int>> IntSet;
	    typedef HashTable<int,int,SetKeyOfValue<int>>::Iterator IntSetIter;
		IntSet ht;
		ht.Insert(4);
		ht.Insert(14);
		ht.Insert(24);
		ht.Insert(33);
		ht.Insert(55);
		ht.Insert(5);
		IntSetIter it = ht.Begin();
		while(it!=ht.End())
		{
			cout<<*it<<endl;
			++it;
		}
		cout<<endl;
		typedef HashTable<string,string,SetKeyOfValue<string>> StringSet;
	    typedef HashTable<string,string,SetKeyOfValue<string>>::Iterator StringSetIter;
		StringSet ss;
		ss.Insert("sort");
		ss.Insert("string");
		ss.Insert("int");
		ss.Insert("char");
		StringSetIter strIt = ss.Begin();
		while(strIt != ss.End())
		{
			cout<<*strIt<<endl;
			++strIt;
		}
	}
	}
	

int main()
{
	HASH_BUCKET::TestHashTable();
	return 0;
}

template<class V>
struct HashNode
{
	V _v;
	HashNode<V>* _next;

	HashNode(const V& v)
		:_v(v)
		,_next(NULL)
	{}
};
template<class K,class V,class KeyOfValue>
class HashTable
{
	typedef HashNode<V> Node;
public:
	HashTable()
		:_size(0)
	{}
	size_t HashFunc(const K& key,size_t size)
	{
		return key%size;
	}
	bool Insert(const V& v)
	{
		CheckCapacity();
		KeyOfValue kov;//生成k值
		size_t index = HashFunc(kov(v),_tables.size());//计算要插入位置的下标
		Node* cur = _tables[index];
		while(cur)
		{
			if(kov(cur->_v)==kov(v))
			{
				return false;
			}
			else
			{
				cur = cur->_next;
			}
			Node* tmp = new Node(v);//将新节点头插入链表
			tmp->_next = _tables[index];
			_tables[index] = tmp;
			++_size;
		}
		return true;
	}
	Node* Find(const K& key)
	{
		size_t index = HashFunc(kov(v),_table.size());
		Node* cur = _tables[index];
		KeyOfValue kov;
		while(cur)
		{
			if(kov(cur->_v)== key);
			{
				return cur;
			}
			else
			{
				cur = cur->_next;
			}
		}
		return NULL;
	}
	bool Remove(const K& key)//考虑头 尾  处理中间和头
	{
		KeyOfValue kov;
		size_t index = HashFunc(key);//找位置
		Node* cur = _tables[index];
		if(cur == NULL)
			return false;
		if(kov(cur->_v)==key)
		{
			_tables[index] = cur->_next;
			delete cur;
			return true;
		}
		else//不是头
		{
			Node* prev = cur;
			cur = cur->_next;
			while(cur)
			{
				if(kov(cur->_v) == key)
				{
					prev->_next = cur->_next;
					delete cur;
					return true;
				}
				prev = cur;
				cur = cur->_next;
			}
			return false;
		}
	}
	 size_t GetPrimenum(const size_t& sz)
    {
        const int Primesize = 28;
        static const unsigned long Primenum[Primesize] =
        {
            53ul, 97ul, 193ul, 389ul, 769ul,
            1543ul, 3079ul, 6151ul, 12289ul, 24593ul,
            49157ul, 98317ul, 196613ul, 393241ul,
            786433ul,
            1572869ul, 3145739ul, 6291469ul, 12582917ul,
            25165843ul,
            50331653ul, 100663319ul, 201326611ul, 402653189ul,
            805306457ul,
            1610612741ul, 3221225473ul, 4294967291ul
        };
        for (int i = 0; i < Primesize; ++i)
        {
            if (Primenum[i] > sz)
            {
                return Primenum[i];
            }
        }
        return sz;
    }
	void CheckCapacity()
	{
		if(_tables.size()==0)
		{
			_tables.resize(GetPrimenum(1),NULL);
		}
		else if(_size = _tables.size())
		{
			size_t newsize = GetPrimenum(_tables.size());
			if(newsize == _tables.size())//处理极端情况
				return;
			vector<Node*> newtables;
			newtables.resize(newsize,NULL);
			KeyOfValue kov;
			for(size_t i = 0;i<_tables.size();i++)
			{
				Node* cur = _tables[i];
				while(cur)
				{
					size_t index = HashFunc(kov(cur->_v),newsize);
					Node* next = cur->_next;
					cur->_next = newtables[index];
					newtables[index] = cur;
					cur = next;
				}
				_tables[i]=NULL;
			}
			_tables.swap(newtables);
		}
	}
private:
	vector<Node*> _tables;
	size_t _size;
};
template<class K>
struct SetKeyOfValue
{
	const K& operator()(const K& key)
	{
		return key;
	}
};
template<class K,class V>
struct MapKeyOfValue
{
	const V& operator()(const pair<K,V>& kv)
	{
		return kv.first;
	}
};